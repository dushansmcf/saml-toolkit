package test.saml2;

import org.apache.xml.security.Init;
import org.apache.xml.security.exceptions.Base64DecodingException;
import org.apache.xml.security.utils.Base64;
import org.opensaml.ws.message.decoder.MessageDecodingException;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.DataFormatException;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;


public class Util {
    static String rawReq = "fZJRb9sgFIXf9yss3rGB2Aqg2FW2qlqlTosadw97iQBfp0g2ZICj%2Ffw5TqtmL31BIA7fufceNnd%2FxyE7Q4jWuxrRnKAMnPGddccavbQPmKO75ssmqnFgJ7md0qt7hj8TxJRtY4SQ5nffvIvTCGEP4WwNvDw%2F1eg1pVOURRGjxx2c85M6QvDeDdZBbvxYqAtqWcEla9QFVJgA8%2BYMB9UdLpaHm3sfUHY%2F%2B1q3aD8sBn%2B0Lh%2BtCT76Pt14mH5Ftep6rAVQXBLdYaWMwFQZrqFThPFVsbSGsgcfDCz91SiFCVD2eF%2BjA%2B00FwQ0rqp%2BRnSsx0KVCgteVSU3DDTXszTGCR5dTMqlGjHCCCZrTNct4bJisuS5oOI3ynbBJ2%2F88NW664Sn4KRX0Ubp1AhRJiP32x9PkuVE6qsoyu9tu8O7n%2FsWZb%2Fek2KXpObsXJTXbD5nnd6MUXONUi4Vh1vC5wD1HjZqaNmzqlsRbED3uCz7cp4GM5itqSGCMkLWYlPc2jRvx%2F8%2FUPMP";
    static String rawResp = "PHNhbWxwOlJlc3BvbnNlIElEPSJfODAwZTU2OTItMDZlNS00ZjBjLTg5MTMtNGY1NmU5MWVkYWY3IiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAyMC0wNy0xN1QwODo1MzoyOC40NjlaIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9zc28tZGV2LnBhZ2Vyb29ubGluZS5jb20vYXV0aG4vYXV0aGVudGljYXRpb24vY3JlYXRpdmVfYWRfc2FtbF9hdXRoZW50aWNhdG9yIiBJblJlc3BvbnNlVG89Il8xZGI4OTBlYi01NWYxLTRkMmYtOWE0YS05ODU1NDhjMmViOGIiIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxJc3N1ZXIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vc3RzLndpbmRvd3MubmV0L2NmMzFiYWRmLWI5ZTEtNDBiZC1hYWM5LTFhYzhiZWRhMDI4My88L0lzc3Vlcj48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWxwOlN0YXR1cz48QXNzZXJ0aW9uIElEPSJfNTRiZTA2MDgtYTg1MC00Y2E4LWFiYzUtMjM4YTVhNzQwMjAzIiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDctMTdUMDg6NTM6MjguNDY5WiIgVmVyc2lvbj0iMi4wIiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI";
    static String postSAML_Payload = "PHNhbWxwOlJlc3BvbnNlIElEPSJfODAwZTU2OTItMDZlNS00ZjBjLTg5MTMtNGY1NmU5MWVkYWY3IiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAyMC0wNy0xN1QwODo1MzoyOC40NjlaIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9zc28tZGV2LnBhZ2Vyb29ubGluZS5jb20vYXV0aG4vYXV0aGVudGljYXRpb24vY3JlYXRpdmVfYWRfc2FtbF9hdXRoZW50aWNhdG9yIiBJblJlc3BvbnNlVG89Il8xZGI4OTBlYi01NWYxLTRkMmYtOWE0YS05ODU1NDhjMmViOGIiIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxJc3N1ZXIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vc3RzLndpbmRvd3MubmV0L2NmMzFiYWRmLWI5ZTEtNDBiZC1hYWM5LTFhYzhiZWRhMDI4My88L0lzc3Vlcj48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWxwOlN0YXR1cz48QXNzZXJ0aW9uIElEPSJfNTRiZTA2MDgtYTg1MC00Y2E4LWFiYzUtMjM4YTVhNzQwMjAzIiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDctMTdUMDg6NTM6MjguNDY5WiIgVmVyc2lvbj0iMi4wIiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BPElzc3Vlcj5odHRwczovL3N0cy53aW5kb3dzLm5ldC9jZjMxYmFkZi1iOWUxLTQwYmQtYWFjOS0xYWM4YmVkYTAyODMvPC9Jc3N1ZXI%2BPFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPFNpZ25lZEluZm8%2BPENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPjxSZWZlcmVuY2UgVVJJPSIjXzU0YmUwNjA4LWE4NTAtNGNhOC1hYmM1LTIzOGE1YTc0MDIwMyI%2BPFRyYW5zZm9ybXM%2BPFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BPFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8%2BPERpZ2VzdFZhbHVlPjFlV3A0R0xMcnFub3RibVFONXlVeEJBVGZHbnpIU0JCbHYwK3Q3bitzcUU9PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1NpZ25lZEluZm8%2BPFNpZ25hdHVyZVZhbHVlPkMwVmR0bFhUa09GVXhHaW5WZ3lEd0M0ekgyMmJPRVlqUjNnWWVMeFF2R3VwMG5xZkJkaXJFbzR0NzBNaGMzYjRnVS9sOGVRMkVVMkxTTTVNWStZMUlVeDc0VHBvODVzNHhzTUpQQ1RCRlhzR0J4RXRZandGbFltd2JQcC9lVEp5VE8zaDlaRzlteTFkS09IbTVVclJ0MVdET21wL3RrK0Ywa2dsYVVKSitwcnlXTXh1Zm5uZEdha2VrQjN4bm9GWjh3QytuUVFFeGNUOUQvUWNTWHoxMnlvTXhpUUVYNjNBZ0NQYlBEeFBxNnBwbW5mMlpmZFRkNStkVFZtK1pPMElPckxsSXJiZWZXRFc4K0JIY0Ezbm5SYzg2a1ZFSnN3NkdnVUh5VXMzVm9POWJtcElPTUdHZFcvYm1Ed2I3V0l5cG5IZEMrRjRTdWNueXg0MjdOcHlndz09PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5mbz48WDUwOURhdGE%2BPFg1MDlDZXJ0aWZpY2F0ZT5NSUlEQlRDQ0FlMmdBd0lCQWdJUVBDeEZieVNWU0xaT2dnZVdSekJXT2pBTkJna3Foa2lHOXcwQkFRc0ZBREF0TVNzd0tRWURWUVFERXlKaFkyTnZkVzUwY3k1aFkyTmxjM05qYjI1MGNtOXNMbmRwYm1SdmQzTXVibVYwTUI0WERUSXdNRFl3TnpBd01EQXdNRm9YRFRJMU1EWXdOekF3TURBd01Gb3dMVEVyTUNrR0ExVUVBeE1pWVdOamIzVnVkSE11WVdOalpYTnpZMjl1ZEhKdmJDNTNhVzVrYjNkekxtNWxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPcFpYU3B1VVhQN3pDbXRVVFAwN1ZMOTdaclkrZHNDMGF5YXJ0ZDhoak4vNGRIY0s3dG1UK2Q4dXVjQTM4K3Y3U3dvNkdMa1FybGJJNkZ0Ky90TTExRGtTYjJkQy9kQWdGL3VmSlZ1elhCT0d3TXdOYVY3KzZFZlpFTU5GL0hhZEdyVk9CNXgzbWsxUEMyY1hJeVR1L2Z4L1hNWU1Hdm5KU254c1paWEtMUEU3THJxelBNWXRuY2VWYXNNNmpUQWRyT3RwZHpFemV3TTNMUjFJa0FvbDlvaVFLeG93SWJQcHNVdGNKc2pDTWprb3FYYUhZWTBGa1FITEhsdm1oVmNrVXhWWXZLSkpkbkU5UnlZejEzY2RHOVZxbUVqczNrWGE2eTFIQU5LRWRrODZlOGN6bUNXVWhqWnpTMEttdlgrb2VvZWRsMjE5SWdJTVNvQkE1VWFXeWNDQXdFQUFhTWhNQjh3SFFZRFZSME9CQllFRkZYUDBPREZoamYzUlM2b1Jpak01VGIreUI4Q01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQjlHdFZpa0xUYkpXSXU1eDlZQ1VUVEt6TmhpNDRYWG9nUC92OFZ5bFJTVUhJNVlUTWRuV3d2REl0L1kxc2pOb25tU3k5UHJpb0VqY0lpSTFVOG5pY3ZlYWZNd0lxNVZMbitnRVkybGc2S0RKQXpnQXZBODhDWHF3ZkhIdnRtWUJvdk43Z29vbHA4VFkva2RkTVRmNlRwTnpOM2xDVE0yTUs0WWU1eExMVkdkcDRicVdDT0ovcWp3RHhwVFJTeWRZSWtMVUR3cU5qditzWWZPRWxKcFlBQjRyVEwvYXczQ2hKMWlhQTRNdFhFdDZPamJVdGJPYTIxbFNoZkx6dk5SYllLMyt1a2JyaG1SbDlsZW1KRWVVbHM1MXZQdUllK2pnK1NzcDQzYXc3UFFqeHQ0L01wZk5NUzJCZlo1RjhHVlNWRzdxTmIzNTJjTExlSmc1cmMzOThaPC9YNTA5Q2VydGlmaWNhdGU%2BPC9YNTA5RGF0YT48L0tleUluZm8%2BPC9TaWduYXR1cmU%2BPFN1YmplY3Q%2BPE5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPm42YnNLS3l5T2FwWXBIRXFxVkwwZG11RU5hc2paSmhoS1l6eTdPRWVBZW88L05hbWVJRD48U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiPjxTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Il8xZGI4OTBlYi01NWYxLTRkMmYtOWE0YS05ODU1NDhjMmViOGIiIE5vdE9uT3JBZnRlcj0iMjAyMC0wNy0xN1QwOTo1MzoyOC4zOTFaIiBSZWNpcGllbnQ9Imh0dHBzOi8vc3NvLWRldi5wYWdlcm9vbmxpbmUuY29tL2F1dGhuL2F1dGhlbnRpY2F0aW9uL2NyZWF0aXZlX2FkX3NhbWxfYXV0aGVudGljYXRvciIvPjwvU3ViamVjdENvbmZpcm1hdGlvbj48L1N1YmplY3Q%2BPENvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDIwLTA3LTE3VDA4OjQ4OjI4LjM5MVoiIE5vdE9uT3JBZnRlcj0iMjAyMC0wNy0xN1QwOTo1MzoyOC4zOTFaIj48QXVkaWVuY2VSZXN0cmljdGlvbj48QXVkaWVuY2U%2Bc3BuOjE0ZjI1ZDMwLWNlYmYtNDRmNC05ODJjLTI3MWMwOTEyMDA3OTwvQXVkaWVuY2U%2BPC9BdWRpZW5jZVJlc3RyaWN0aW9uPjwvQ29uZGl0aW9ucz48QXR0cmlidXRlU3RhdGVtZW50PjxBdHRyaWJ1dGUgTmFtZT0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9pZGVudGl0eS9jbGFpbXMvdGVuYW50aWQiPjxBdHRyaWJ1dGVWYWx1ZT5jZjMxYmFkZi1iOWUxLTQwYmQtYWFjOS0xYWM4YmVkYTAyODM8L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9pZGVudGl0eS9jbGFpbXMvb2JqZWN0aWRlbnRpZmllciI%2BPEF0dHJpYnV0ZVZhbHVlPmQ3OGEwZDc1LWVmNjktNDVhMi04ZmIyLTY0NzQ2ZTViNjFkYzwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIj48QXR0cmlidXRlVmFsdWU%2BU2FqaXRoLlNAQ3JlYXRpdmVTb2Z0d2FyZS5jb208L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvc3VybmFtZSI%2BPEF0dHJpYnV0ZVZhbHVlPlNpbHZhPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL2dpdmVubmFtZSI%2BPEF0dHJpYnV0ZVZhbHVlPlNhaml0aDwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy9kaXNwbGF5bmFtZSI%2BPEF0dHJpYnV0ZVZhbHVlPlNhaml0aCBTaWx2YTwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy9pZGVudGl0eXByb3ZpZGVyIj48QXR0cmlidXRlVmFsdWU%2BaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvY2YzMWJhZGYtYjllMS00MGJkLWFhYzktMWFjOGJlZGEwMjgzLzwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2NsYWltcy9hdXRobm1ldGhvZHNyZWZlcmVuY2VzIj48QXR0cmlidXRlVmFsdWU%2BaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2F1dGhlbnRpY2F0aW9ubWV0aG9kL3Bhc3N3b3JkPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48L0F0dHJpYnV0ZVN0YXRlbWVudD48QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIwLTA3LTE3VDA4OjUzOjIyLjc5MVoiIFNlc3Npb25JbmRleD0iXzU0YmUwNjA4LWE4NTAtNGNhOC1hYmM1LTIzOGE1YTc0MDIwMyI%2BPEF1dGhuQ29udGV4dD48QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmQ8L0F1dGhuQ29udGV4dENsYXNzUmVmPjwvQXV0aG5Db250ZXh0PjwvQXV0aG5TdGF0ZW1lbnQ%2BPC9Bc3NlcnRpb24%2BPC9zYW1scDpSZXNwb25zZT4%3D";


    public static void main(String[] args) throws Exception {
        Init.init();
    }


    public static byte[] decodeBase64b(String b64Data) throws Base64DecodingException {
        return Base64.decode(b64Data);
    }

    public static String inflate(byte[] deflatedData, boolean supportGzipCompression) throws Exception {
        try {
            byte[] inflatedData = new byte[(10 * deflatedData.length)];
            Inflater decompresser = new Inflater(supportGzipCompression);
            decompresser.setInput(deflatedData, 0, deflatedData.length);
            int inflatedBytesLength = decompresser.inflate(inflatedData);
            decompresser.end();
            return new String(inflatedData, 0, inflatedBytesLength);
        } catch (DataFormatException dfe) {
            throw new Exception(dfe);
        }
    }
}
